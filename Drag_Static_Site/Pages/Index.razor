@page "/{QuickLinkParam?}"
@page "/blog/{QuickLinkParam?}"
@using Drag_Static_Site.Models
@using Drag_Static_Site.Services
@inject HttpClient HttpClient
@inject PostService PostService
@inject NavigationManager NavManager
@inject IJSRuntime JsRunTime
@if (CurrentPost == null)
{
    <MudSkeleton SkeletonType="SkeletonType.Circle" Width="75px" Height="75px" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="200px"></MudSkeleton>
    <h3><MudProgressCircular Color="Color.Success" Size="Size.Large" /> Loading Post...</h3>
}
else
{
    <MudGrid>
        <MudItem xs="1" />
        <MudItem xs="10">
            <br/>
            <MudPaper Elevation="6">
                <MudText Typo="Typo.h3" Align="Align.Left">@CurrentPost.PostName</MudText>
                <br/>
                <MudText Typo="Typo.h5" Align="Align.Right">Published / Last Updated: @CurrentPost.PublishedDateTime</MudText>
                <MudText Align="Align.Right">
                    <MudLink Typo="Typo.h5" OnClick="CopyLinkToClipBoard_Click" >Share Link: @NavManager.Uri@CurrentPost.QuickLink</MudLink>
                </MudText>
            </MudPaper>
            <br/>
            <MudMarkdown Value="@CurrentMarkDown"></MudMarkdown>
            <br/>
            <br/>
            <MudPaper Elevation="3">
                <MudFab OnClick="GoPrevious" StartIcon="@Icons.Material.Filled.ArrowLeft" Label="Previous Post" Color="Color.Primary"/>
                <MudFab OnClick="GoNext" EndIcon="@Icons.Material.Filled.ArrowRight" Label="Next post" Color="Color.Success" />
            </MudPaper>
        </MudItem>
        <MudItem xs="1"></MudItem>
    </MudGrid>

}

@code
{
    [Parameter]
    public string QuickLinkParam { get; set; }
    string CurrentMarkDown;
    int CurrentPostIndex;
    int LastPostIndex => PostService.LastPostIndex;
    Post CurrentPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await PostService.InitializeAsync(HttpClient);
        if (!string.IsNullOrWhiteSpace(QuickLinkParam))
        {
            CurrentPost = PostService.Posts.FirstOrDefault(x => x.QuickLink == QuickLinkParam);
        }
        if (CurrentPost == null)
        {
            CurrentPost = PostService.Posts.First();
        }
        var markdown = await PostService.GetPostHtmlAsync(CurrentPost, HttpClient);
        CurrentMarkDown = markdown;
        CurrentPostIndex = 0;
        await base.OnInitializedAsync().ConfigureAwait(false);

    }

    private async Task GoPrevious()
    {
        if (CurrentPostIndex > 0 && CurrentPostIndex <= LastPostIndex )
        {
            CurrentPost = PostService.Posts[CurrentPostIndex - 1];
            CurrentMarkDown = await PostService.GetPostHtmlAsync(CurrentPost, HttpClient); ;
            CurrentPostIndex--;
        }
        else if (CurrentPostIndex == 0)
        {
            CurrentPost = PostService.Posts[LastPostIndex];
            CurrentMarkDown = await PostService.GetPostHtmlAsync(CurrentPost, HttpClient); ;
            CurrentPostIndex = LastPostIndex;
        }
    }

    private async Task GoNext()
    {
        if (CurrentPostIndex < LastPostIndex)
        {
            CurrentPost = PostService.Posts[CurrentPostIndex + 1];
            CurrentMarkDown = await PostService.GetPostHtmlAsync(CurrentPost, HttpClient); ;
            CurrentPostIndex++;
        }
        else if (CurrentPostIndex == LastPostIndex)
        {
            CurrentPost = PostService.Posts[0];
            CurrentMarkDown = await PostService.GetPostHtmlAsync(CurrentPost, HttpClient); ;
            CurrentPostIndex = 0;
        }

    }

    private async Task CopyLinkToClipBoard_Click(MouseEventArgs arg)
    {
        await JsRunTime.InvokeVoidAsync("CopyToClipBoard", $"{@NavManager.Uri}{CurrentPost.QuickLink}");
    }
}
